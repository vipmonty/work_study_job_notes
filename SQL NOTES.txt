CREATING DATABASE:
CREATE DATABASE <database_name>

DROP DATABASE IF EXISTS database_name;

CREATING TABLE:
CREATE TABLE <database_name>(
id int auto_increment,
name varchar(24),
primary key (id)
);

DISPLAY ALL INFO FROM CREATED TABLE SUCH AS FOREIGN KEY NAMES:
SHOW CREATE TABLE monty_family;

DROP FOREIGN KEY CONSTRAINT AFTER GETTING FOREIGN 
HIDDEN NAME FROM ABOVE COMMAND:
ALTER TABLE monty_family
DROP FOREIGN KEY `monty_family_ibfk_1`
'and then you could drop the column'
ALTER TABLE monty_family
DROP COLUMN cred_id

ALTER TABLE WITH NEW FOREIGN KEY:
ALTER TABLE credentials
ADD COLUMN key_to_monty_family int;

ALTER TABLE credentials
add foreign key (key_to_monty_family) references monty_family(prim_id);

ADDING COLUMN:
ALTER TABLE <table_name>
ADD COLUMN <column_name> int not null;



RENAMING:
ALTER TABLE <table_name>
RENAME COLUMN <old_name> TO <new_name>;

RENAMING TABLE <old_name> TO <new_name>;





CHANGING CONSTRAINT IN COLUMN:
ALTER TABLE <table_name>
MODIFY COLUMN <column name> varchar(24);

DEFAULT CONSTRAINT FOR A COLUMN:
ALTER TABLE <table_name>
MODIFY COLUMN varchar(24) DEFAULT '<what ever string>'




REPOSITIONING COLUMN:
ALTER TABLE <table_name>
MODIFY <column_name> varchar(24)
AFTER <name of column you want to place column>;
"or FIRST if you want it first"


UPDATE COLUMN WHERE CONSTRAINTS
UPDATE customer1 
SET phone_no='PHONE NO' 
WHERE cust_city='Torento';


DROP COLUMN:
ALTER TABLE <table_name>
DROP <column_name>;


UPDATE EXISTING ROW WITH WHERE CLAUSE
UPDATE `users`
SET `username` = 'Jack', `password` = '123'
WHERE `id` = 1


INSERTING ROW INTO TABLE:
INSERT INTO <table_name>
VALUES ("viphakone","monty",45.00,"1987-04-07");
"Need correct data type for constraints"
"DATE constraint formate = YYYY-MM-DD"

DELECT A ROW FROM TABLE:
DELETE FROM `table_name` [WHERE condition];
'Good rule of practice is to select what you want
to delete first to see what it is you are going
to delete b/c it is irreversable'

QUARYING TABLE WHERE LIKE WILDCARDS:
SELECT password, site FROM viphakone WHERE site LIKE '%america%'
'% = any number of characters, _ = on charater'
'example of _ is:'
SELECT password, site FROM viphakone WHERE site LIKE '%__eri%'

USING LIKE WITH OR and AND OPERATOR WITH USE OF PARENTHESES:
SELECT * FROM customers
where (address like '%trail%' or address like '%avenue%')
AND phone not like '%9%'
'Get customers where address contain trail or avenue,
 but does not have 9 in the phone number'

 USING REGEXP INSTEAD OF LIKE:
 SELECT * FROM customers
 WHERE last_name REGEXP '^field|mac|rose$'
 'This quary retrieves customers where last_name starts with
 field, or has mac, or end with rose'
SELECT * FROM customers
WHERE last_name REGEXP 'e[fmq]'
'This quary retrives customers where 
last name has e followed by f, m or q' using []'
'can also use [a-w] if you want a range of values'
  
GET VALUES/DESCRIPTION FROM A TABLE WITH OUT LOOKING AT DATABASE
DESCRIBE <TABLE NAME>;

SELECT STATMEMENT WITH MATH INCLUDED IS POSSIBLE:
SELECT 
    first_name, 
    points / 50 
FROM customers

TO GET LIST OF DATABASES:
show databases;

QUARYING A COLUMN WHERE IN LIST OF VALUES:
SELECT * FROM <table name>
WHERE <column> IN ('','','');

ORDER BY MULTIPLE COLUMNS:
select * FROM employee
order BY sex, first_name, last_name

USING GROUP BY:
SELECT SUM(total_sales), client_id from works_with
GROUP BY client_id
'GROUP BY column outputs distinct results and 
SUM(total_sales) sums total sales of each GROUP BY
column'

USING GROUP BY WITH WHERE CLAUSE AND LIKE KEYWORD:
SELECT count(client_name), client_name as 'Count of LLC'
FROM client
WHERE client_name LIKE '%llc%'
GROUP BY client_name

USING UNION to combine two SELECT statements which consolidate into one column:
SELECT client_name from client
UNION
SELECT supplier_name from branch_supplier

USING JOIN TO QUARY FROM TWO TABLE ACCORDING PRIMARY AND FOREIGN KEYS:
SELECT employee.emp_id, employee.first_name, 
branch.branch_name,
branch.mgr_id
FROM employee
JOIN branch
WHERE employee.emp_id = branch.mgr_id;

JOINING FROM SAME TABLE:
SELECT 
    e.employee_id,
    e.first_name,
    e.last_name,
    m.first_name as 'Manager'
FROM employees e
JOIN employees m
    ON e.reports_to = m.employee_id

MULTIPLE JOINS FROM 3 TABLES:
SELECT 
    c.first_name,
    c.last_name, 
    c.customer_id,
    o.
    o.order_date,
    os.name
FROM orders o
JOIN customers c 
ON c.customer_id = o.customer_id
JOIN order_statuses os
ON o.status = os.order_status_id
ORDER BY o.order_date DESC

MULTIPLE LEFT JOINS:
SELECT
    o.order_date,
    o.order_id,
    c.first_name,
    s.name as 'shipper',
    os.name as 'status'
FROM
    orders o
LEFT JOIN customers c
ON o.customer_id = c.customer_id
LEFT JOIN shippers s
ON o.shipper_id = s.shipper_id
LEFT JOIN order_statuses os
ON os.order_status_id = o.status
ORDER BY shipper, order_id

USING "USING" WITH JOIN STATEMENT:
SELECT
    c.name,
    p.date,
    p.amount,
    pm.name
FROM clients c
JOIN payments p
USING(client_id)
JOIN payment_methods pm
ON pm.payment_method_id = p.payment_method
'USING Operator only works if keys 
from tables are the same'

USING 'CROSS JOIN' TO OUT EVERYTHING IN 
BOTH TABLES:
SELECT
    *
FROM shippers s
CROSS JOIN products p


USING UNION TO JOIN TEMPORARY TABLE 
BASE ON A MATH CLAUSE:
SELECT
    c.customer_id,
    c.first_name,
    c.points,
    'Bronze' AS type
FROM customers c
WHERE c.points < 2000
UNION
SELECT
    c.customer_id,
    c.first_name,
    c.points,
    'Silver' AS type
FROM customers c
WHERE c.points BETWEEN 2000 AND 3000
UNION
SELECT
    c.customer_id,
    c.first_name,
    c.points,
    'Gold' AS type
FROM customers c
WHERE c.points > 3000
ORDER BY first_name
'This code above uses UNION to combine
temporary tables we make up base on WHERE
CLAUSE and creating temp colmn using 
'Gold/Bronze/Silver' AS type 
in SELECT statement'

USING NESTED QUARYS:
SELECT client.client_id , client.client_name
FROM client
WHERE client.client_id IN (
    select client_id 
    from works_with
    where emp_id = (
        SELECT emp_id 
        from employee
        WHERE first_name = 'michael'
    )
)
'us IN b/c inner statement results in a list'

NO DUPLICATES IN RESULT USE DISTINCT IN SELECT STATEMENT:
SELECT DISTINCT emp_id
FROM works_with
WHERE total_sales > 30000

USING BETWEEN OPERATOR:
SELECT * FROM customers
WHERE points BETWEEN 1000 and 3000

MAKING A COPY OF A TABLE INTO NEW TABLE:
CREATE TABLE invoice_archieves
AS (
    SELECT
        i.*,
        c.name as client_name
    FROM invoices i
    JOIN clients c
    USING (client_id)
    WHERE payment_date IS NOT NULL
)

LAST_INSERT_ID() RETRIEVES THE LAST INSERT ID
SELECT LAST_INSERT_ID()
'This quary retrieves the last inserted id'

USING NESTED QUARY TO UPDATE TABLE:
UPDATE orders
SET comments = 'Gold'
WHERE customer_id IN (SELECT customer_id
FROM customers
WHERE points > 3000
)
'This quary set Comments column to Gold if customers.points
is greater than 3000'

DELECT ROWS USING NESTED QUARY:
DELECT FROM invoices
WHERE client_id = (
    SELECT *
    FROM client
    WHERE name = 'Myworks'
)

CASE STATEMENT:
SELECT *, 
(CASE
    WHEN age > 30 THEN 'OLD'
    WHEN age < 30 THEN 'Young'
    ELSE 'Still in prime'
END) AS 'my opinion'
FROM employeedemographics
'kinda like 'if' statement in Python'

PERFORMING MATH WITH CASE STATEMENT:
SELECT *,
(CASE
    WHEN jobTitle regexp 'salesman' THEN salary + (salary*.05)
    ELSE salary + (salary*.02)
END) AS 'After Raise'
FROM employeesalary

USING 'HAVING' WITH 'GROUP BY' AGGERGATION ex. COUNT(),AVG():
select Gender,count(Gender)as 'male count' FROM employeedemographics
GROUP BY gender
HAVING count(Gender) > 3


CREATING A TEMPORARY TABLE WITH EXISTING TABLE:
CREATE TEMPORARY TABLE temp_employee_salary AS SELECT * FROM employeesalary
'The temp table will not show up in the schema or database.
Only using a SELECT statement and only while session is active'

DROPPING COLUMN IN TEMPORARY TABLE IN ORDER TO LEAVE OUT A COLUMN:
ALTER TABLE temp_employee_salary
DROP COLUMN employeeID 

USING TEMPORARY TABLES TO CREATE NEW TABLE:
CREATE TABLE both_tables AS 
(SELECT * FROM employeedemographics
CROSS JOIN temp_employee_salary)

DROPPING/DELETING TEMPORARY TABLE:
DROP TEMPORARY TABLE table_name;


COUNT() HOW MANY OCCURANCE IN A CERTAIN COLUMN:
SELECT age, count(age) from employeedemographics
GROUP BY age

USING CONCAT() TO COMBINE STRINGS OR COLUMN THAT ARE STRINGS
INTO ONE COLUMN:
SELECT FirstName, LastName, CONCAT(FirstName,' ',LastName) 'FullName' FROM both_tables

USING PARTITION BY OPPOSED TO GROUP BY:
SELECT FirstName, LastName, Age, Gender, JobTitle,
count(gender) OVER (PARTITION BY Gender) as 'sex count' 
FROM both_tables
WHERE JobTitle REGEXP 'sales'
'TAKES THE COUNT OF MALE AND FEMALE FROM ALL salesman'

ANOTHER EXAMPLE OF PARTITION BY:
SELECT FirstName, LastName, Age, Gender, JobTitle,
avg(age) OVER (PARTITION BY Gender) as 'AVG AGE BASED SEX' 
FROM both_tables
WHERE JobTitle REGEXP 'sales'
'This quary takes the avg() of age based on sex'

USING CTE TABLE:
WITH temp_table AS(
SELECT FirstName, LastName, Age, Gender, JobTitle,
avg(age) OVER (PARTITION BY Gender) as 'AVG AGE BASED SEX' 
FROM both_tables
WHERE JobTitle REGEXP 'sales')
SELECT * FROM temp_table t
'CTE or WITH statements are similar to TEMPORARY tables
but you need the code within the quary to use it.'

USING DROP TABLE IF EXIST FOR TEMPORARY TABLES:
DROP TABLE IF EXIST <TABLENAME>
'sometime we have to delete a temp table due
to errors.'